/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BlacklistService } from "../blacklist.service";
import { BlacklistCreateInput } from "./BlacklistCreateInput";
import { Blacklist } from "./Blacklist";
import { BlacklistFindManyArgs } from "./BlacklistFindManyArgs";
import { BlacklistWhereUniqueInput } from "./BlacklistWhereUniqueInput";
import { BlacklistUpdateInput } from "./BlacklistUpdateInput";

export class BlacklistControllerBase {
  constructor(protected readonly service: BlacklistService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Blacklist })
  async createBlacklist(
    @common.Body() data: BlacklistCreateInput
  ): Promise<Blacklist> {
    return await this.service.createBlacklist({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        reason: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Blacklist] })
  @ApiNestedQuery(BlacklistFindManyArgs)
  async blacklists(@common.Req() request: Request): Promise<Blacklist[]> {
    const args = plainToClass(BlacklistFindManyArgs, request.query);
    return this.service.blacklists({
      ...args,
      select: {
        createdAt: true,
        id: true,
        reason: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Blacklist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async blacklist(
    @common.Param() params: BlacklistWhereUniqueInput
  ): Promise<Blacklist | null> {
    const result = await this.service.blacklist({
      where: params,
      select: {
        createdAt: true,
        id: true,
        reason: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Blacklist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBlacklist(
    @common.Param() params: BlacklistWhereUniqueInput,
    @common.Body() data: BlacklistUpdateInput
  ): Promise<Blacklist | null> {
    try {
      return await this.service.updateBlacklist({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          reason: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Blacklist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBlacklist(
    @common.Param() params: BlacklistWhereUniqueInput
  ): Promise<Blacklist | null> {
    try {
      return await this.service.deleteBlacklist({
        where: params,
        select: {
          createdAt: true,
          id: true,
          reason: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

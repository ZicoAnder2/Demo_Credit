/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Blacklist as PrismaBlacklist,
  User as PrismaUser,
} from "@prisma/client";

export class BlacklistServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BlacklistCountArgs, "select">
  ): Promise<number> {
    return this.prisma.blacklist.count(args);
  }

  async blacklists(
    args: Prisma.BlacklistFindManyArgs
  ): Promise<PrismaBlacklist[]> {
    return this.prisma.blacklist.findMany(args);
  }
  async blacklist(
    args: Prisma.BlacklistFindUniqueArgs
  ): Promise<PrismaBlacklist | null> {
    return this.prisma.blacklist.findUnique(args);
  }
  async createBlacklist(
    args: Prisma.BlacklistCreateArgs
  ): Promise<PrismaBlacklist> {
    return this.prisma.blacklist.create(args);
  }
  async updateBlacklist(
    args: Prisma.BlacklistUpdateArgs
  ): Promise<PrismaBlacklist> {
    return this.prisma.blacklist.update(args);
  }
  async deleteBlacklist(
    args: Prisma.BlacklistDeleteArgs
  ): Promise<PrismaBlacklist> {
    return this.prisma.blacklist.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.blacklist
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
